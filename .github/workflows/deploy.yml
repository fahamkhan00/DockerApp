name: Deploy Spring Boot App to EC2 (No Docker) - Refined

on:
  push:
    branches:
      - main

env:
  JAR_FILENAME: 'app.jar'    # Your finalName is app.jar
  DEPLOY_DIR: '/home/ubuntu/apps/' # Recommended: a dedicated directory for your app on EC2
  SYSTEMD_SERVICE_NAME: 'app' # The name of your systemd service file (e.g., myapp.service)

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # GitHub-hosted runner for build and deployment orchestration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Create Deployment Directory on EC2 (if not exists)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            mkdir -p ${{ env.DEPLOY_DIR }}

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "target/${{ env.JAR_FILENAME }}" # Correctly points to target/app.jar
          target: "${{ env.DEPLOY_DIR }}/${{ env.JAR_FILENAME }}" # Uploads to /home/ubuntu/apps/your-spring-boot-app/app.jar

      - name: Update Systemd Service with Environment Variables
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            SERVICE_FILE="/etc/systemd/system/${{ env.SYSTEMD_SERVICE_NAME }}.service"

            # Use sed to add/update Environment variables in the [Service] section
            # This makes sure your credentials are read from Systemd by your app
            # rather than exposed on the command line.
            
            # Remove existing Environment lines to prevent duplicates or old values
            sudo sed -i '/^Environment=/d' "${SERVICE_FILE}"
            
            # Add new Environment variables. Adjust these to your specific secret names.
            # Append these lines to the [Service] section.
            sudo sed -i '/^\[Service\]/a\'$'\n'\
            'Environment="DB_HOST=${{ secrets.DB_HOST }}"'$'\n'\
            'Environment="DB_USER=${{ secrets.DB_USER }}"'$'\n'\
            'Environment="DB_PASS=${{ secrets.DB_PASS }}"'$'\n'\
            'Environment="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            "${SERVICE_FILE}"

            echo "Updated Systemd service file with environment variables."
            echo "Reloading systemd daemon to pick up changes..."
            sudo systemctl daemon-reload

      - name: Manage Spring Boot App via Systemd on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Stopping ${{ env.SYSTEMD_SERVICE_NAME }} if running..."
            sudo systemctl stop ${{ env.SYSTEMD_SERVICE_NAME }} || true

            echo "Starting ${{ env.SYSTEMD_SERVICE_NAME }}..."
            sudo systemctl start ${{ env.SYSTEMD_SERVICE_NAME }}

            echo "Checking status of ${{ env.SYSTEMD_SERVICE_NAME }}..."
            sudo systemctl status ${{ env.SYSTEMD_SERVICE_NAME }} --no-pager

            echo "Verifying application health (wait 15s for startup)..."
            sleep 15
            curl -v -f http://localhost:8080/actuator/health || { echo "Health check failed!"; exit 1; }
            echo "Deployment successful!"
